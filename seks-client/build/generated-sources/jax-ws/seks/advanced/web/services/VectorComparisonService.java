
package seks.advanced.web.services;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2-hudson-752-
 * Generated source version: 2.2
 * 
 */
@WebService(name = "VectorComparisonService", targetNamespace = "http://services.web.advanced.seks/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface VectorComparisonService {


    /**
     * 
     * @param documentSemanticVector
     * @param querySemanticVector
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSharedConcepts", targetNamespace = "http://services.web.advanced.seks/", className = "seks.advanced.web.services.GetSharedConcepts")
    @ResponseWrapper(localName = "getSharedConceptsResponse", targetNamespace = "http://services.web.advanced.seks/", className = "seks.advanced.web.services.GetSharedConceptsResponse")
    @Action(input = "http://services.web.advanced.seks/VectorComparisonService/getSharedConceptsRequest", output = "http://services.web.advanced.seks/VectorComparisonService/getSharedConceptsResponse")
    public List<String> getSharedConcepts(
        @WebParam(name = "documentSemanticVector", targetNamespace = "")
        String documentSemanticVector,
        @WebParam(name = "querySemanticVector", targetNamespace = "")
        String querySemanticVector);

    /**
     * 
     * @param sharedConcepts
     * @param documentSemanticVector
     * @param querySemanticVector
     * @return
     *     returns seks.advanced.web.services.DocumentResult
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "compareSemanticVectors", targetNamespace = "http://services.web.advanced.seks/", className = "seks.advanced.web.services.CompareSemanticVectors")
    @ResponseWrapper(localName = "compareSemanticVectorsResponse", targetNamespace = "http://services.web.advanced.seks/", className = "seks.advanced.web.services.CompareSemanticVectorsResponse")
    @Action(input = "http://services.web.advanced.seks/VectorComparisonService/compareSemanticVectorsRequest", output = "http://services.web.advanced.seks/VectorComparisonService/compareSemanticVectorsResponse")
    public DocumentResult compareSemanticVectors(
        @WebParam(name = "documentSemanticVector", targetNamespace = "")
        String documentSemanticVector,
        @WebParam(name = "querySemanticVector", targetNamespace = "")
        String querySemanticVector,
        @WebParam(name = "sharedConcepts", targetNamespace = "")
        List<String> sharedConcepts);

    /**
     * 
     * @param documentResults
     * @return
     *     returns java.util.List<seks.advanced.web.services.DocumentResult>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "sortDocumentResultsByRelevance", targetNamespace = "http://services.web.advanced.seks/", className = "seks.advanced.web.services.SortDocumentResultsByRelevance")
    @ResponseWrapper(localName = "sortDocumentResultsByRelevanceResponse", targetNamespace = "http://services.web.advanced.seks/", className = "seks.advanced.web.services.SortDocumentResultsByRelevanceResponse")
    @Action(input = "http://services.web.advanced.seks/VectorComparisonService/sortDocumentResultsByRelevanceRequest", output = "http://services.web.advanced.seks/VectorComparisonService/sortDocumentResultsByRelevanceResponse")
    public List<DocumentResult> sortDocumentResultsByRelevance(
        @WebParam(name = "documentResults", targetNamespace = "")
        List<DocumentResult> documentResults);

    /**
     * 
     * @param documentId
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSemanticVectorByDocumentId", targetNamespace = "http://services.web.advanced.seks/", className = "seks.advanced.web.services.GetSemanticVectorByDocumentId")
    @ResponseWrapper(localName = "getSemanticVectorByDocumentIdResponse", targetNamespace = "http://services.web.advanced.seks/", className = "seks.advanced.web.services.GetSemanticVectorByDocumentIdResponse")
    @Action(input = "http://services.web.advanced.seks/VectorComparisonService/getSemanticVectorByDocumentIdRequest", output = "http://services.web.advanced.seks/VectorComparisonService/getSemanticVectorByDocumentIdResponse")
    public String getSemanticVectorByDocumentId(
        @WebParam(name = "documentId", targetNamespace = "")
        String documentId);

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getDocumentIds", targetNamespace = "http://services.web.advanced.seks/", className = "seks.advanced.web.services.GetDocumentIds")
    @ResponseWrapper(localName = "getDocumentIdsResponse", targetNamespace = "http://services.web.advanced.seks/", className = "seks.advanced.web.services.GetDocumentIdsResponse")
    @Action(input = "http://services.web.advanced.seks/VectorComparisonService/getDocumentIdsRequest", output = "http://services.web.advanced.seks/VectorComparisonService/getDocumentIdsResponse")
    public List<String> getDocumentIds();

}
